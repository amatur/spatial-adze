initialize() {
	//setSeed(9082151780790313168); 
	//initializeSLiMOptions(keepPedigrees=T);  // Optional for deterministic outcomes
	defineCfgParam("DOMINANCE", 0.5);
	defineCfgParam("SELECTION", 0.1);
	//defineCfgParam("DISPERSAL_DISTANCE", 0.015);
	defineCfgParam("DISPERSAL_DISTANCE", 0.015);
	defineCfgParam("GENOME_LENGTH", 1e7); // 10Mb genome
	defineCfgParam("OUT_PREFIX", "sweep_"+asString(SELECTION)+"/out");
	
	//defineConstant("NEUTRAL_FILE", "neutral_nocoord/out_100000.trees");
	defineConstant("NEUTRAL_FILE", "m_fix_all.trees");
	defineConstant("SIMULATION_AREA", 1);
	defineConstant("POPULATION_SIZE", 10000);
	defineConstant("GRID_SIDE_LENGTH", SIMULATION_AREA/sqrt(POPULATION_SIZE)); //SIMULATION_AREA/sqrt(POPULATION_SIZE)
	
	defineConstant("MUTATION_RATE", 0); // overlay neutral mutations later
	defineConstant("RECOMB_RATE", 1e-8);
	
	initializeSLiMModelType("nonWF");
	
	initializeSLiMOptions(dimensionality="xy", periodicity="xy");
	
	TRRECORD = 1;
	if(TRRECORD == 1){
		initializeTreeSeq();
	}
	
	//initializeMutationType("m0", 0.5, "f", 0.0);  // h=0.5, neutral (s=0)
	initializeMutationType("m1", 0, "f", 0); // calculated in first, assigned to tagF
	
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, GENOME_LENGTH - 1);
	initializeMutationRate(MUTATION_RATE);
	initializeRecombinationRate(RECOMB_RATE);
	
	// reproduction
	initializeInteractionType(1, "xy", reciprocal=T, maxDistance=DISPERSAL_DISTANCE);
}

function (void) defineCfgParam(string$ name, lifs value) {
	if (!exists(name))
		defineConstant(name, value);
}
2: first() {
	i1.evaluate(p1);
	
	// Store fitness for parent sampling
	inds = p1.individuals;
	counts = inds.countOfMutationsOfType(m1);
	inds[counts == 0].tagF = 1.0;
	inds[counts == 1].tagF = 1.0 + (DOMINANCE * SELECTION);
	inds[counts == 2].tagF = 1.0 + SELECTION;
}
reproduction() {
	for (i in 0:(sqrt(POPULATION_SIZE) - 1)) { // x axis
		for (j in 0:(sqrt(POPULATION_SIZE) - 1)) { // y axis
			current_offspring_x = runif(1, (i*GRID_SIDE_LENGTH), ((i+1)*GRID_SIDE_LENGTH));
			current_offspring_y = runif(1, (j*GRID_SIDE_LENGTH), ((j+1)*GRID_SIDE_LENGTH));
			current_offspring_pos = c(current_offspring_x, current_offspring_y);
			potential_parents = i1.nearestNeighborsOfPoint(current_offspring_pos, p1, POPULATION_SIZE);
			if(size(potential_parents) < 2) {
				catn("ERROR " + getSeed() + " " + sim.cycle);
				stop("Error");
			}
			parents = sample(potential_parents, 2, weights = potential_parents.tagF); // section 4.2.3
			offspring = p1.addCrossed(parents[0], parents[1]);
			offspring.setSpatialPosition(current_offspring_pos);
		}
	}
	self.active = 0; // callback only called once in a tick, see section 16.3
}
1 early() {
	// initialize population
	
	sim.addSubpop("p1", POPULATION_SIZE);
	p1.setSpatialBounds(c(0, 0, sqrt(SIMULATION_AREA), sqrt(SIMULATION_AREA)));
	pos = c();
	
	for (i in 0:(sqrt(POPULATION_SIZE) - 1)) { // x axis
		for (j in 0:(sqrt(POPULATION_SIZE) - 1)) { // y axis
			pos = c(pos, runif(1, (i*GRID_SIDE_LENGTH), ((i+1)*GRID_SIDE_LENGTH)));
			pos = c(pos, runif(1, (j*GRID_SIDE_LENGTH), ((j+1)*GRID_SIDE_LENGTH)));
		}
	}
	p1.individuals.setSpatialPosition(pos);
	
	TRRECORD = 1;
	if(TRRECORD==1){
		sim.treeSeqRememberIndividuals(p1.individuals);
	}
	
}
2: early() {
	// kill parents
	inds = p1.individuals;
	sim.killIndividuals(inds[inds.age > 0]);
}
1 late() {
	// read in neutral burn-in
	cat("reading from population file..." + NEUTRAL_FILE + "\n");
	sim.readFromPopulationFile(NEUTRAL_FILE);
	
	// add beneficial mutation meera
//	target = sample(p1.genomes, 1);
//	target.addNewDrawnMutation(m1, asInteger(GENOME_LENGTH/2));
	
	
	// Find individuals near the center
	center_x = sqrt(SIMULATION_AREA) / 2;
	center_y = sqrt(SIMULATION_AREA) / 2;
	max_distance = sqrt(SIMULATION_AREA) / 100;  // Mutation radius (adjustable)

	// Filter individuals within the radius
	inds = p1.individuals;
	distances = sqrt((inds.x - center_x)^2 + (inds.y - center_y)^2);
	center_inds = inds[distances < max_distance];

	// If we have valid individuals, choose one and apply mutation
	if (size(center_inds) > 0) {
		target = sample(center_inds.genomes, 1);
		target.addNewDrawnMutation(m1, asInteger(GENOME_LENGTH/2));
		print("Mutation introduced at: " + target.individual.x + ", " + target.individual.y);
	} else {
		catn("No individuals found near center for mutation.");
	}

}
2:100000000 late() {


mut = sim.mutationsOfType(m1);
	freq_m1 = sim.mutationFrequencies(NULL, mut) ; //freq_m1 = sim.countOfMutationsOfType(m1) / p1.individualCount;
	
	
//	  output_data = "";
//	  color = "gray";
//	  mutType = "Ancestral";
//	  mutPos = 0;
//	  mutId = "None";
//	  for (individual in p1.individuals) {
//        for (genome in individual.genomes) {
//            for (mutation in genome.mutations) {
//                mutCount = sum(individual.genomes.mutations == mutation);
//                // Assign colors and mutation type
//                if (mutCount == 2) {
//                    mutType = "Homozygous";
//                    color = "lightblue";
//                } else if (mutCount == 1){
//                    mutType = "Heterozygous";
//                    color = "blue";
//                }else{
//                	  mutType = "Ancestral";
//                    color = "gray";
//                }
//               
//                // Print mutation information
//                mutPos = mutation.position;
//                mutId = mutation.id;
//                
//            }
//        }
//        
//			output_data = output_data + individual.index + ","+ individual.spatialPosition[0] + "," + individual.spatialPosition[1] + "," + color + "\n";
//			outputFile = "mutation_data_"+ community.tick +".csv";
//			writeFile(outputFile, output_data);
//
//			catn("Ind " + individual.index + " | Mut " + 
//			                     " | Pos " + mutPos + " | " + mutType +
//			                     " | Color: " + color + " | x: " + individual.spatialPosition[0] + " | y: " + individual.spatialPosition[1]);
//    }
	
	print("Adaptive mutation reached " + freq_m1*100.0 +"% at tick: " + sim.cycle);    

	


	TRRECORD = 1;

	DIVISOR = 50 ; //DIVISOR = asInteger(MAX_GEN/10);
	if(community.tick % DIVISOR == 0) {

		// Export the data for plotting later
		output_data = "";
		inds = p1.individuals;
		for (ind in inds) {
		    pos_x = ind.spatialPosition[0];
		    pos_y = ind.spatialPosition[1];
		    
			// Check mutation status
			//mutation_status = ifelse(ind.genomes.containsMutations(mut), "carrier", "non-carrier");
	
		    muts = ind.genomes.mutationsOfType(m1);
		    
		    if (size(muts) == 2) {
		        mutation_status = "homozygous";  // Homozygous mutation
		    } else if (size(muts) == 1) {
		        mutation_status = "heterozygous";  // Heterozygous mutation
		    } else {
		        mutation_status = "wildtype";  // No mutation
		    }
		    output_data = output_data + ind.index +","+pos_x + "," + pos_y + "," + mutation_status + "," + freq_m1 + "," + community.tick  + "\n";
		}
	
		// Save the data to a file
		outputFile =  "sweep_"+asString(SELECTION)+"/mutation_data_"+ community.tick +".csv";
		writeFile(outputFile, output_data);
		
		
		if(TRRECORD == 1){
			catn("saving .trees file... " + community.tick);
			sim.treeSeqOutput(OUT_PREFIX + "_" + community.tick + ".trees");
			//sim.outputVCF(filePath=OUT_PREFIX + "_" + community.tick + ".vcf");
			p1.outputVCFSample(10000, filePath=OUT_PREFIX + "_" + community.tick + ".vcf");		
			coords_file = OUT_PREFIX+"_" +  + community.tick + ".coordinates.txt";
			for (ind in p1.individuals) {
				line = paste(ind.index, ind.spatialPosition[0], ind.spatialPosition[1], sep=' ');
				writeFile(coords_file, line, append=T);
			}
		}

	}
	
	// @@ catn("Number of individuals: " + p1.individualCount);
	countFreq = sim.mutationFrequencies(p1, NULL);
	// @@ cat("TICK " + sim.cycle + " FREQUENCY " + countFreq + "\n");
	
	// inds = p1.individuals;
	//	genotypes = inds.genomes.countOfMutationsOfType(m1);
	//    colors = rep("gray", size(inds)); // Default: Ancestral (0|0)
	//    colors[genotypes == 1] = "lightblue"; // Heterozygous (0|1)
	//    colors[genotypes == 2] = "darkblue"; // Homozygous (1|1)
	
	
	
	
	
	if(size(countFreq) != 0) {
		// If fixed, print out seed and the time to fixation
		if(countFreq == 1) {
			writeFile("slim-output.log", "Mutation survived");
			catn("Mutation survived " + getSeed() + " " + sim.cycle); // TODO: also write this to an output file
			// 			sim.treeSeqOutput(OUT_PREFIX + "_fixed.trees");
			catn("FIXED " + getSeed() + " " + sim.cycle); // TODO: also write this to an output file
			// 			sim.treeSeqOutput(OUT_PREFIX + "_fixed.trees");
			sim.simulationFinished();
		}
	} else {
		// If lost, print out only seed
		catn("NOT FIXED " + getSeed() + " " + sim.cycle); // TODO: also write this to an output file
			print("Mutation lost. Restarting simulation...");
			writeFile("slim-output.log", "Mutation lost. Restarting simulation...");
         //community.rescheduleScriptBlock(self, start=sim.cycle + 1, end=sim.cycle+10000);	
         sim.simulationFinished();
		//sim.simulationFinished();
	}
}

